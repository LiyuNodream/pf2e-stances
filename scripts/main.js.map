{"version":3,"file":"main.js","mappings":"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","sources":["webpack:///../../../../foundryVTT-projects/@utils/module.ts","webpack:///../../../../foundryVTT-projects/@utils/foundry/path.ts","webpack:///../../../../foundryVTT-projects/@utils/foundry/flags.ts","webpack:///../../../../foundryVTT-projects/@utils/foundry/localize.ts","webpack:///../../../../foundryVTT-projects/@utils/foundry/notification.ts","webpack:///./src/stances.ts","webpack:///../../../../foundryVTT-projects/@utils/foundry/settings.ts","webpack:///./src/savant.ts","webpack:///../../../../foundryVTT-projects/@utils/foundry/item.ts","webpack:///./src/sheet.ts","webpack:///./src/main.ts"],"sourcesContent":["export let MODULE_ID = ''\r\n\r\nexport function setModuleID(id: string) {\r\n    if (!MODULE_ID) MODULE_ID = id\r\n}\r\n","import { MODULE_ID } from '@utils/module'\r\n\r\nexport function getSettingLocalizationPath(...path: string[]) {\r\n    return `${MODULE_ID}.settings.${path.join('.')}`\r\n}\r\n\r\nexport function flagsUpdatePath(...path: string[]) {\r\n    return `flags.${MODULE_ID}.${path.join('/')}`\r\n}\r\n\r\nexport function templatePath(...path: string[]) {\r\n    path = path.filter(x => typeof x === 'string')\r\n    return `modules/${MODULE_ID}/templates/${path.join('/')}`\r\n}\r\n\r\nexport function imagePath(...path: string[]) {\r\n    return `modules/${MODULE_ID}/images/${path.join('/')}`\r\n}\r\n","import { MODULE_ID } from '@utils/module'\r\n\r\nexport function hasModuleFlag(doc: foundry.abstract.Document) {\r\n    return getProperty(doc, `flags.${MODULE_ID}`) !== undefined\r\n}\r\n\r\nexport function flagPath(key: string) {\r\n    return `flags.${MODULE_ID}.key`\r\n}\r\n\r\nexport function getFlag<T extends unknown>(doc: foundry.abstract.Document, key: string): T | undefined\r\nexport function getFlag<T extends unknown>(doc: foundry.abstract.Document, key: string, fallback: T): T\r\nexport function getFlag<T extends unknown>(doc: foundry.abstract.Document, key: string, fallback?: T): T | undefined {\r\n    return (doc.getFlag(MODULE_ID, key) as T | undefined) ?? fallback\r\n}\r\n\r\n/**\r\n * @template {foundry.Document} T\r\n * @param {T} doc\r\n * @param {string} key\r\n * @param {any} value\r\n * @returns T\r\n */\r\nexport function setFlag(doc: foundry.abstract.Document, key: string, value: unknown) {\r\n    return doc.setFlag(MODULE_ID, key, value)\r\n}\r\n\r\nexport function getSourceId(doc: ClientDocument) {\r\n    return doc.getFlag<ItemUUID>('core', 'sourceId')\r\n}\r\n\r\nexport function hasSourceId(doc: ClientDocument, sourceId: DocumentUUID) {\r\n    return getSourceId(doc) === sourceId\r\n}\r\n\r\nexport function includesSourceId(doc: ClientDocument, list: DocumentUUID[]) {\r\n    const sourceId = getSourceId(doc)\r\n    return sourceId ? list.includes(sourceId) : false\r\n}\r\n","import { MODULE_ID } from '@utils/module'\r\nimport { warn, NotifyArgs, info, error } from '@utils/foundry/notification'\r\n\r\nexport type LocalizeArgs = [key: string, data?: Record<string, string | number | boolean>]\r\n\r\nexport function localize(...args: LocalizeArgs) {\r\n    let [key, data] = args\r\n    key = `${MODULE_ID}.${key}`\r\n    if (data) return game.i18n.format(key, data)\r\n    return game.i18n.localize(key)\r\n}\r\n\r\nexport function hasLocalization(key: string) {\r\n    return game.i18n.has(`${MODULE_ID}.${key}`, false)\r\n}\r\n\r\nexport function localizePath(key: string) {\r\n    return `${MODULE_ID}.${key}`\r\n}\r\n\r\nexport function localizeTemplate(key: string, { hash }: { hash: Record<string, string> }) {\r\n    return localize(`${key}`, hash)\r\n}\r\n\r\nexport function subLocalize(subKey: string) {\r\n    const fn = (...args: LocalizeArgs) => localize(`${subKey}.${args[0]}`, args[1])\r\n\r\n    Object.defineProperties(fn, {\r\n        warn: {\r\n            value: (...args: NotifyArgs) => warn(`${subKey}.${args[0]}`, args[1], args[2]),\r\n            enumerable: false,\r\n            configurable: false,\r\n        },\r\n        info: {\r\n            value: (...args: NotifyArgs) => info(`${subKey}.${args[0]}`, args[1], args[2]),\r\n            enumerable: false,\r\n            configurable: false,\r\n        },\r\n        error: {\r\n            value: (...args: NotifyArgs) => error(`${subKey}.${args[0]}`, args[1], args[2]),\r\n            enumerable: false,\r\n            configurable: false,\r\n        },\r\n        has: {\r\n            value: (key: string) => hasLocalization(`${subKey}.${key}`),\r\n            enumerable: false,\r\n            configurable: false,\r\n        },\r\n        path: {\r\n            value: (key: string) => localizePath(`${subKey}.${key}`),\r\n            enumerable: false,\r\n            configurable: false,\r\n        },\r\n        template: {\r\n            value: (key: string, { hash }: { hash: Record<string, string> }) => fn(key, hash),\r\n            enumerable: false,\r\n            configurable: false,\r\n        },\r\n    })\r\n\r\n    return fn as ((...args: LocalizeArgs) => string) & {\r\n        warn: (...args: NotifyArgs) => void\r\n        info: (...args: NotifyArgs) => void\r\n        error: (...args: NotifyArgs) => void\r\n        has: (key: string) => boolean\r\n        path: (key: string) => string\r\n        template: (key: string, options: { hash: Record<string, string> }) => string\r\n    }\r\n}\r\n","import { localize } from '@utils/foundry/localize'\r\n\r\nexport type NotifyArgs = [str: string, arg1?: boolean | Record<string, string | number | boolean>, arg2?: boolean]\r\n\r\nfunction notify(\r\n    str: string,\r\n    arg1?: 'warning' | 'info' | 'error' | boolean | Record<string, string | number | boolean>,\r\n    arg2?: boolean | Record<string, string | number | boolean>,\r\n    arg3?: boolean\r\n) {\r\n    const type = typeof arg1 === 'string' ? arg1 : 'info'\r\n    const data = typeof arg1 === 'object' ? arg1 : typeof arg2 === 'object' ? arg2 : undefined\r\n    const permanent = typeof arg1 === 'boolean' ? arg1 : typeof arg2 === 'boolean' ? arg2 : arg3 ?? false\r\n\r\n    ui.notifications.notify(localize(str, data), type, { permanent })\r\n}\r\n\r\nexport function warn(...args: NotifyArgs) {\r\n    const [str, arg1, arg2] = args\r\n    notify(str, 'warning', arg1, arg2)\r\n}\r\n\r\nexport function info(...args: NotifyArgs) {\r\n    const [str, arg1, arg2] = args\r\n    notify(str, 'info', arg1, arg2)\r\n}\r\n\r\nexport function error(...args: NotifyArgs) {\r\n    const [str, arg1, arg2] = args\r\n    notify(str, 'error', arg1, arg2)\r\n}\r\n","import { getSourceId } from '@utils/foundry/flags'\r\nimport { getSetting } from '@utils/foundry/settings'\r\nimport { error } from '../../../../../foundryVTT-projects/@utils/foundry/notification'\r\n\r\nconst STANCES: StanceData[] = [\r\n    {\r\n        // Arcane Cascade\r\n        feat: 'Compendium.pf2e.classfeatures.09iL38CZZEa0q0Mt',\r\n        effect: 'Compendium.pf2e.feat-effects.fsjO5oTKttsbpaKl',\r\n    },\r\n    {\r\n        // Buckler Dance\r\n        feat: 'Compendium.pf2e.feats-srd.tDWc2LQNl0Op1Auq',\r\n        effect: 'Compendium.pf2e-stances.effects.PS17dsXkTdQmOv7w',\r\n    },\r\n    {\r\n        // Bullet Dancer Stance\r\n        feat: 'Compendium.pf2e.feats-srd.j1hhTLOq7o80XCyV',\r\n        effect: 'Compendium.pf2e-stances.effects.TZDeooWoSNiU7fa3',\r\n    },\r\n    {\r\n        // Cobra Stance\r\n        feat: 'Compendium.pf2e.feats-srd.AkV4Jyllo6nlK2Sl',\r\n        effect: 'Compendium.pf2e.feat-effects.CgxYa0lrLUjS2ZhI',\r\n    },\r\n    {\r\n        // Cobra Stance (Envenom)\r\n        feat: 'Compendium.pf2e.feats-srd.xQuNswWB3eg1UM28',\r\n        effect: 'Compendium.pf2e.feat-effects.2Qpt0CHuOMeL48rN',\r\n        replace: 'Compendium.pf2e.feats-srd.AkV4Jyllo6nlK2Sl', // Cobra Stance\r\n    },\r\n    {\r\n        // Crane Stance\r\n        feat: 'Compendium.pf2e.feats-srd.bf7NCeKqDClaqhTR',\r\n        effect: 'Compendium.pf2e.feat-effects.nwkYZs6YwXYAJ4ps',\r\n    },\r\n    {\r\n        // Disarm Stance\r\n        feat: 'Compendium.pf2e.feats-srd.1p5ErCp33nGOzEsk',\r\n        effect: 'Compendium.pf2e.feat-effects.LxSev4GNKv26DbZw',\r\n    },\r\n    {\r\n        // Disruptive Stance\r\n        feat: 'Compendium.pf2e.feats-srd.OEGhbRgW6wRbccns',\r\n        effect: 'Compendium.pf2e-stances.effects.qBR3kqGCeKp3T2Be',\r\n    },\r\n    {\r\n        // Dragon Stance\r\n        feat: 'Compendium.pf2e.feats-srd.8sy3sHwOHS4ImwvJ',\r\n        effect: 'Compendium.pf2e.feat-effects.qUowHpn79Dpt1hVn',\r\n    },\r\n    {\r\n        // Dread Marshal Stance\r\n        feat: 'Compendium.pf2e.feats-srd.R7c4PyTNkZb0yvoT',\r\n        effect: 'Compendium.pf2e.feat-effects.KBEJVRrie2JTHWIK',\r\n    },\r\n    {\r\n        // Dueling Dance (Fighter)\r\n        feat: 'Compendium.pf2e.feats-srd.FYz5eQeTox9IDkSd',\r\n        effect: 'Compendium.pf2e.feat-effects.KiuBRoMFxL2Npt51',\r\n    },\r\n    {\r\n        // Dueling Dance (Swashbuckler)\r\n        feat: 'Compendium.pf2e.feats-srd.9VGmE7X4aK2W8YWj',\r\n        effect: 'Compendium.pf2e.feat-effects.KiuBRoMFxL2Npt51',\r\n    },\r\n    {\r\n        // Everstand Stance\r\n        feat: 'Compendium.pf2e.feats-srd.6GN1zh3RcnZhrzxP',\r\n        effect: 'Compendium.pf2e.feat-effects.GGebXpRPyONZB3eS',\r\n    },\r\n    {\r\n        // Fane's Fourberie\r\n        feat: 'Compendium.pf2e.feats-srd.80CEAB05TP5ki9iW',\r\n        effect: 'Compendium.pf2e-stances.effects.GvqB4M8LrHpzYEvl',\r\n    },\r\n    {\r\n        // Gorilla Stance\r\n        feat: 'Compendium.pf2e.feats-srd.DqD7htz8Sd1dh3BT',\r\n        effect: 'Compendium.pf2e.feat-effects.RozqjLocahvQWERr',\r\n    },\r\n    {\r\n        // Gorilla Stance (Pound)\r\n        feat: 'Compendium.pf2e.feats-srd.nRjyyDulHnP5OewA',\r\n        effect: 'Compendium.pf2e.feat-effects.UZKIKLuwpQu47feK',\r\n        replace: 'Compendium.pf2e.feats-srd.DqD7htz8Sd1dh3BT',\r\n    },\r\n    {\r\n        // Graceful Poise\r\n        feat: 'Compendium.pf2e.feats-srd.rFaUJtB46scuAidY',\r\n        effect: 'Compendium.pf2e-stances.effects.mark4VEQoynfYNBF',\r\n    },\r\n    {\r\n        // Impassable Wall Stance\r\n        feat: 'Compendium.pf2e.feats-srd.YeyOqNFKaeuOTiJr',\r\n        effect: 'Compendium.pf2e-stances.effects.zzC2qZwEKf4Ja3xD',\r\n    },\r\n    {\r\n        // Inspiring Marshal Stance\r\n        feat: 'Compendium.pf2e.feats-srd.bvOsJNeI0ewvQsFa',\r\n        effect: 'Compendium.pf2e.feat-effects.kzEPq4aczYb6OD2h',\r\n    },\r\n    {\r\n        // Ironblood Stance\r\n        feat: 'Compendium.pf2e.feats-srd.x9cYkB8DrUBBwqJd',\r\n        effect: 'Compendium.pf2e.feat-effects.tPKXLtDJ3bzJcXlv',\r\n    },\r\n    {\r\n        // Jellyfish Stance\r\n        feat: 'Compendium.pf2e.feats-srd.Jwq5o13uZF3ooln1',\r\n        effect: 'Compendium.pf2e.feat-effects.pkcr9w5x6bKzl3om',\r\n    },\r\n    {\r\n        // Lunging Stance\r\n        feat: 'Compendium.pf2e.feats-srd.ZghzLmYgeE19GqjP',\r\n        effect: 'Compendium.pf2e-stances.effects.W8CKuADdbODpBh6O',\r\n    },\r\n    {\r\n        // Masquerade of Seasons Stance\r\n        feat: 'Compendium.pf2e.feats-srd.KMVXUgFArcftg1jQ',\r\n        effect: 'Compendium.pf2e.feat-effects.6IsZQpwRJQWIzdGx',\r\n    },\r\n    {\r\n        // Mobile Shot Stance\r\n        feat: 'Compendium.pf2e.feats-srd.rByA8NDI6ZtNgBeT',\r\n        effect: 'Compendium.pf2e-stances.effects.NWOmJ6WJFheaGhho',\r\n    },\r\n    {\r\n        // Monastic Archer Stance\r\n        feat: 'Compendium.pf2e.feats-srd.YG2RxXE9SMfwo6wP',\r\n        effect: 'Compendium.pf2e.feat-effects.1dxD3xsTzak6GNj5',\r\n    },\r\n    {\r\n        // Mountain Stance\r\n        feat: 'Compendium.pf2e.feats-srd.ZL5UU9quCTvcWzfY',\r\n        effect: 'Compendium.pf2e.feat-effects.gYpy9XBPScIlY93p',\r\n    },\r\n    {\r\n        // Multishot Stance\r\n        feat: 'Compendium.pf2e.feats-srd.RzhnxgiAopWILCvs',\r\n        effect: 'Compendium.pf2e.feat-effects.l4QUaedYofnfXig0',\r\n    },\r\n    {\r\n        // Paragon's Guard\r\n        feat: 'Compendium.pf2e.feats-srd.hPDerDCYmag3s0dP',\r\n        effect: 'Compendium.pf2e.feat-effects.6EDoy3OSFZ4L3Vs7',\r\n    },\r\n    {\r\n        // Peafowl Stance\r\n        feat: 'Compendium.pf2e.feats-srd.C3MgEkPNaIhTddbr',\r\n        effect: 'Compendium.pf2e.feat-effects.vjvcccAwdkOLA1Fc',\r\n    },\r\n    {\r\n        // Point-Blank Shot\r\n        feat: 'Compendium.pf2e.feats-srd.Yl2wYv24v5kw95aS',\r\n        effect: 'Compendium.pf2e.feat-effects.9HPxAKpP3WJmICBx',\r\n    },\r\n    {\r\n        // Powder Punch Stance\r\n        feat: 'Compendium.pf2e.feats-srd.Ziky4XVV7syXVbUg',\r\n        effect: 'Compendium.pf2e-stances.effects.kDTiRg9vVOYNnTyr',\r\n    },\r\n    {\r\n        // Push Back the Dead!\r\n        feat: 'Compendium.pf2e.feats-srd.BtZJJClWCpc31Ven',\r\n        effect: 'Compendium.pf2e.feat-effects.OeZ0E1oUKyGPxPy0',\r\n    },\r\n    {\r\n        // Rain of Embers Stance\r\n        feat: 'Compendium.pf2e.feats-srd.rbiMK71SvGZGRLJ1',\r\n        effect: 'Compendium.pf2e.feat-effects.Im5JBInybWFbHEYS',\r\n    },\r\n    {\r\n        // Reflective Ripple Stance\r\n        feat: 'Compendium.pf2e.feats-srd.knZUN4sYExIyRC4F',\r\n        effect: 'Compendium.pf2e.feat-effects.QDQwHxNowRwzUx9R',\r\n    },\r\n    {\r\n        // Ricochet Stance (Fighter)\r\n        feat: 'Compendium.pf2e.feats-srd.tRHjUCl0xqG97nok',\r\n        effect: 'Compendium.pf2e-stances.effects.Unfl4QQURWaX2zfd',\r\n    },\r\n    {\r\n        // Ricochet Stance (Rogue)\r\n        feat: 'Compendium.pf2e.feats-srd.RsNvCSrCN7czHC0G',\r\n        effect: 'Compendium.pf2e-stances.effects.Unfl4QQURWaX2zfd',\r\n    },\r\n    {\r\n        // Rough Terrain Stance\r\n        feat: 'Compendium.pf2e.feats-srd.O0POcPD2aELYTcIK',\r\n        effect: 'Compendium.pf2e-stances.effects.YkiTA74FrUUu5IvI',\r\n    },\r\n    {\r\n        // Shooting Stars Stance\r\n        feat: 'Compendium.pf2e.feats-srd.6cQSPqXoAO6oJl0i',\r\n        effect: 'Compendium.pf2e.feat-effects.RXbfq6oqzVnW6xOV',\r\n    },\r\n    {\r\n        // Six Pillars Stance\r\n        feat: 'Compendium.pf2e.feats-srd.hT0pVPqFuiEsmRb8',\r\n        effect: 'Compendium.pf2e.feat-effects.P80mwvCAEncR2snK',\r\n    },\r\n    {\r\n        // Sky and Heaven Stance\r\n        feat: 'Compendium.pf2e.feats-srd.UjEeHamC2C8JfgJz',\r\n        effect: 'Compendium.pf2e.feat-effects.CQfkyJkRHw4IHWhv',\r\n    },\r\n    {\r\n        // Stoked Flame Stance\r\n        feat: 'Compendium.pf2e.feats-srd.GuEdTz1VMEptQnOd',\r\n        effect: 'Compendium.pf2e.feat-effects.rp1YauUSULuqW8rs',\r\n    },\r\n    {\r\n        // Stumbling Stance\r\n        feat: 'Compendium.pf2e.feats-srd.7FRYyKXDKjGoANYj',\r\n        effect: 'Compendium.pf2e.feat-effects.BCyGDKcplkJiSAKJ',\r\n    },\r\n    {\r\n        // Tangled Forest Stance\r\n        feat: 'Compendium.pf2e.feats-srd.2tUdsoPEnW9yS8so',\r\n        effect: 'Compendium.pf2e.feat-effects.PMHwCrnh9W4sMu5b',\r\n    },\r\n    {\r\n        // Tiger Stance\r\n        feat: 'Compendium.pf2e.feats-srd.VCjAlOvjNvFJOsG5',\r\n        effect: 'Compendium.pf2e.feat-effects.pf9yvKNg6jZLrE30',\r\n    },\r\n    {\r\n        // Twinned Defense (Fighter)\r\n        feat: 'Compendium.pf2e.feats-srd.xjLbabfyQzBNT4y1',\r\n        effect: 'Compendium.pf2e-stances.effects.3eHMqVx30JGiJqtM',\r\n    },\r\n    {\r\n        // Twinned Defense (Swashbuckler)\r\n        feat: 'Compendium.pf2e.feats-srd.kTRGAST9J9ZxJZ4A',\r\n        effect: 'Compendium.pf2e-stances.effects.3eHMqVx30JGiJqtM',\r\n    },\r\n    {\r\n        // Vitality-Manipulating Stance\r\n        feat: 'Compendium.pf2e.feats-srd.Tj79ePSD212EZjRM',\r\n        effect: 'Compendium.pf2e.feat-effects.h45sUZFs5jhuQdCE',\r\n    },\r\n    {\r\n        // Whirling Blade Stance\r\n        feat: 'Compendium.pf2e.feats-srd.IaiEZaA8erufMUCr',\r\n        effect: 'Compendium.pf2e.feat-effects.JefXqvhzUeBArkAP',\r\n    },\r\n    {\r\n        //  Whirlwind Stance\r\n        feat: 'Compendium.pf2e.feats-srd.wZZyasfIqwiJBQAQ',\r\n        effect: 'Compendium.pf2e-stances.effects.q6UokHWSEcEYWmvh',\r\n    },\r\n    {\r\n        // Wolf Stance\r\n        feat: 'Compendium.pf2e.feats-srd.AN9jY1JVcU20Qdw6',\r\n        effect: 'Compendium.pf2e.feat-effects.b2kWJuCPj1rDMdwz',\r\n    },\r\n]\r\n\r\nconst FEATS: Map<ItemUUID, StanceData> = new Map()\r\nconst EFFECTS: Map<ItemUUID, StanceData> = new Map()\r\n\r\nexport function parseCustomStances() {\r\n    FEATS.clear()\r\n    EFFECTS.clear()\r\n\r\n    for (const stance of STANCES) {\r\n        FEATS.set(stance.feat, stance)\r\n        EFFECTS.set(stance.effect, stance)\r\n    }\r\n\r\n    try {\r\n        const setting = getSetting<string>('custom').trim()\r\n        if (!setting) return\r\n\r\n        const customs = JSON.parse(setting)\r\n\r\n        for (const stance of customs) {\r\n            if (typeof stance !== 'object' || Array.isArray(stance)) continue\r\n            if (typeof stance.feat !== 'string' || stance.feat.length < 21) continue\r\n            if (typeof stance.effect !== 'string' || stance.feat.length < 21) continue\r\n            if (FEATS.has(stance.feat) || EFFECTS.has(stance.effect)) continue\r\n\r\n            FEATS.set(stance.feat, stance)\r\n            EFFECTS.set(stance.effect, stance)\r\n        }\r\n    } catch (err) {\r\n        error('settings.custom.error')\r\n        console.error(err)\r\n    }\r\n}\r\n\r\nexport function getStances(actor: CharacterPF2e) {\r\n    const stances: StanceData[] = []\r\n    const replaced: ItemUUID[] = []\r\n    const effects: Map<ItemUUID, string> = new Map()\r\n\r\n    for (const feat of actor.itemTypes.feat) {\r\n        const sourceId = getSourceId(feat)\r\n        const stance = sourceId && FEATS.get(sourceId)\r\n        if (!stance) continue\r\n\r\n        stances.push(stance)\r\n        if (stance.replace) replaced.push(stance.replace)\r\n    }\r\n\r\n    for (const effect of actor.itemTypes.effect) {\r\n        const sourceId = getSourceId(effect)\r\n        if (!sourceId || !EFFECTS.has(sourceId)) continue\r\n        effects.set(sourceId, effect.id)\r\n    }\r\n\r\n    const filtered = stances.filter(stance => !replaced.includes(stance.feat))\r\n\r\n    return filtered\r\n        .map(stance => {\r\n            const feat = fromUuidSync<CompendiumIndexData>(stance.feat)\r\n            const effect = fromUuidSync<CompendiumIndexData>(stance.effect)\r\n            const replace = stance.replace && fromUuidSync<CompendiumIndexData>(stance.replace)\r\n            if (!feat || !effect) return\r\n\r\n            const returned: ReturnedStance = {\r\n                name: replace ? replace.name : feat.name,\r\n                img: effect.img,\r\n                effectID: effects.get(stance.effect) ?? '',\r\n                effectUUID: stance.effect,\r\n            }\r\n\r\n            return returned\r\n        })\r\n        .filter(stance => stance) as ReturnedStance[]\r\n}\r\n\r\nexport function getEffects(actor: CharacterPF2e) {\r\n    const effects = []\r\n\r\n    for (const effect of actor.itemTypes.effect) {\r\n        const sourceId = getSourceId(effect)\r\n        if (!sourceId || !EFFECTS.has(sourceId)) continue\r\n        effects.push({ uuid: sourceId, id: effect.id })\r\n    }\r\n\r\n    return effects\r\n}\r\n\r\nexport async function addStance(actor: CharacterPF2e, uuid: ItemUUID) {\r\n    const effect = await fromUuid<EffectPF2e>(uuid)\r\n    if (effect) {\r\n        const items = (await actor.createEmbeddedDocuments('Item', [effect.toObject()])) as EffectPF2e[]\r\n        items[0]?.toMessage()\r\n        return true\r\n    }\r\n    return false\r\n}\r\n","import { MODULE_ID } from '@utils/module'\r\nimport { getSettingLocalizationPath } from '@utils/foundry/path'\r\n\r\nexport function getSetting<T extends any>(key: string) {\r\n    return game.settings.get(MODULE_ID, key) as T\r\n}\r\n\r\nexport function setSetting(key: string, value: unknown) {\r\n    return game.settings.set(MODULE_ID, key, value)\r\n}\r\n\r\n/**\r\n * options.scope = 'world'\r\n *\r\n * options.config = false\r\n */\r\nexport function registerSetting<\r\n    TType extends number | string | boolean | object | Function,\r\n    TChoices extends Record<string, unknown> | undefined\r\n>(options: Omit<SettingRegistration<TType, TChoices>, 'choices'> & { choices?: string[] | Record<string, unknown> }) {\r\n    const name = options.name\r\n    options.scope = options.scope ?? 'world'\r\n    options.config = options.config ?? false\r\n    if (options.config) {\r\n        options.name = getSettingLocalizationPath(name, 'name')\r\n        options.hint = getSettingLocalizationPath(name, 'hint')\r\n    }\r\n    if (Array.isArray(options.choices)) {\r\n        options.choices = options.choices.reduce((choices, choice) => {\r\n            choices[choice] = getSettingLocalizationPath(name, 'choices', choice)\r\n            return choices\r\n        }, {} as Record<string, unknown>)\r\n    }\r\n    game.settings.register<TType, TChoices>(MODULE_ID, name, options as SettingRegistration<TType, TChoices>)\r\n}\r\n\r\n/**\r\n * options.restricted = true\r\n *\r\n * options.icon = 'fas fa-cogs'\r\n */\r\nexport function registerSettingMenu(\r\n    options: RequiredBy<Partial<Omit<SettingSubmenuConfig, 'type'>>, 'name'> & { type: ConstructorOf<FormApplication> }\r\n) {\r\n    const name = options.name\r\n    options.name = getSettingLocalizationPath('menus', name, 'name')\r\n    options.label = getSettingLocalizationPath('menus', name, 'label')\r\n    options.hint = getSettingLocalizationPath('menus', name, 'hint')\r\n    options.restricted = options.restricted ?? true\r\n    options.icon = options.icon ?? 'fas fa-cogs'\r\n    game.settings.registerMenu(MODULE_ID, name, options as SettingSubmenuConfig)\r\n}\r\n\r\nexport function getCombatTrackerConfig() {\r\n    return game.settings.get('core', 'combatTrackerConfig') as { resource: string; skipDefeated: boolean }\r\n}\r\n","import { hasItemWithSourceId } from '@utils/foundry/item'\r\nimport { info } from '@utils/foundry/notification'\r\nimport { subLocalize } from '@utils/foundry/localize'\r\nimport { addStance, getEffects, getStances } from './stances'\r\n\r\nconst STANCE_SAVANT: ItemUUID[] = ['Compendium.pf2e.feats-srd.yeSyGnYDkl2GUNmu', 'Compendium.pf2e.feats-srd.LI9VtCaL5ZRk0Wo8']\r\n\r\nexport async function checkForSavant(actor: CharacterPF2e) {\r\n    if (!hasItemWithSourceId(actor, STANCE_SAVANT, ['feat'])) return\r\n    if (getEffects(actor).length) return\r\n\r\n    const stances = getStances(actor)\r\n    if (!stances.length) return\r\n\r\n    if (stances.length === 1) {\r\n        const stance = stances[0]!\r\n        if (await addStance(actor, stance.effectUUID)) info('useStance', { stance: stance.name })\r\n    } else {\r\n        openStancesMenu(actor, stances)\r\n    }\r\n}\r\n\r\nfunction openStancesMenu(actor: CharacterPF2e, stances: ReturnedStance[]) {\r\n    const localize = subLocalize('menu')\r\n    let content = `<h3>${localize('select')}</h3>`\r\n\r\n    for (let i = 0; i < stances.length; i++) {\r\n        const stance = stances[i]!\r\n        content += `<label style=\"height: 24px; display: block;\">`\r\n        content += `<input type=\"radio\" name=\"stance\" value=\"${stance.effectUUID}\"`\r\n        if (i === 0) content += ' checked'\r\n        content += ` style=\"margin-right: .5em;\"> <span>${stance.name}</span></label>`\r\n    }\r\n\r\n    content += '<div style=\"margin-bottom: .5em;\"></div>'\r\n\r\n    new Dialog({\r\n        title: localize('title'),\r\n        content,\r\n        buttons: {\r\n            yes: {\r\n                icon: '<i class=\"fa-solid fa-people-arrows\"></i>',\r\n                label: localize('accept'),\r\n                callback: html => addStance(actor, html.find('[name=stance]:checked')!.val() as ItemUUID),\r\n            },\r\n            no: {\r\n                icon: '<i class=\"fa-solid fa-xmark\"></i>',\r\n                label: localize('cancel'),\r\n            },\r\n        },\r\n    }).render(true)\r\n}\r\n","import { getSourceId, includesSourceId } from '@utils/foundry/flags'\r\n\r\ntype ActorItemTypes<A extends Actor> = (keyof A['itemTypes'])[]\r\n\r\nfunction getItemSourceIdCondition(sourceId: ItemUUID | ItemUUID[]) {\r\n    return Array.isArray(sourceId)\r\n        ? (item: Item) => includesSourceId(item, sourceId)\r\n        : (item: Item) => getSourceId(item) === sourceId\r\n}\r\n\r\nexport function getItems<A extends Actor, I extends Item = CollectionValue<A['items']>>(actor: A, itemTypes?: ActorItemTypes<A>) {\r\n    return (itemTypes ? itemTypes.flatMap(type => actor.itemTypes[type as string]) : actor.items) as Embedded<I>[]\r\n}\r\n\r\nexport function findItemWithSourceId<A extends Actor, I extends Item = CollectionValue<A['items']>>(\r\n    actor: A,\r\n    sourceId: ItemUUID,\r\n    itemTypes?: ActorItemTypes<A>\r\n) {\r\n    return getItems<A, I>(actor, itemTypes).find(getItemSourceIdCondition(sourceId))\r\n}\r\n\r\nexport function hasItemWithSourceId<A extends Actor, I extends Item = CollectionValue<A['items']>>(\r\n    actor: A,\r\n    sourceId: ItemUUID | ItemUUID[],\r\n    itemTypes?: ActorItemTypes<A>\r\n) {\r\n    return getItems<A, I>(actor, itemTypes).some(getItemSourceIdCondition(sourceId))\r\n}\r\n\r\nexport function filterItemsWithSourceId<A extends Actor, I extends Item = CollectionValue<A['items']>>(\r\n    actor: A,\r\n    sourceId: ItemUUID | ItemUUID[],\r\n    itemTypes?: ActorItemTypes<A>\r\n) {\r\n    return getItems<A, I>(actor, itemTypes).filter(getItemSourceIdCondition(sourceId))\r\n}\r\n","import { localize } from '@utils/foundry/localize'\r\nimport { templatePath } from '@utils/foundry/path'\r\nimport { addStance, getEffects, getStances } from './stances'\r\n\r\nexport async function renderCharacterSheetPF2e(sheet: CharacterSheetPF2e, html: JQuery) {\r\n    const actor = sheet.actor\r\n    await addStances(actor, html)\r\n\r\n    html.find(\r\n        '.sheet-body .sheet-content [data-tab=actions] .tab-content .actions-panels [data-tab=encounter] .pf2e-stances .pf2e-stances__stance'\r\n    ).on('click', event => onToggleStance(event, actor))\r\n}\r\n\r\nexport function refreshCharacterSheets(actor: CharacterPF2e) {\r\n    for (const win of Object.values(ui.windows)) {\r\n        if (!(win instanceof ActorSheet)) continue\r\n        if (actor === win.actor) win.render()\r\n    }\r\n}\r\n\r\nasync function onToggleStance(event: JQuery.ClickEvent<any, any, HTMLElement>, actor: CharacterPF2e) {\r\n    const target = event.currentTarget\r\n    const canUseStances = target.closest('.pf2e-stances')?.classList.contains('can-use-stances')\r\n    if (!event.ctrlKey && !canUseStances) return\r\n\r\n    const effectUUID = target.dataset.effectUuid as ItemUUID\r\n    const effects = getEffects(actor)\r\n    const already = effects.findIndex(effect => effect.uuid === effectUUID)\r\n\r\n    let create = false\r\n\r\n    if (already < 0) {\r\n        create = true\r\n    } else if (effects.length) {\r\n        const other = effects.filter(effect => effect.uuid !== effectUUID).length\r\n        const more = effects.filter(effect => effect.uuid === effectUUID).length > 1\r\n        if (other || more) effects.splice(already, 1)\r\n    }\r\n\r\n    if (effects.length) {\r\n        await actor.deleteEmbeddedDocuments(\r\n            'Item',\r\n            effects.map(x => x.id)\r\n        )\r\n    }\r\n\r\n    if (create) addStance(actor, effectUUID)\r\n}\r\n\r\nasync function addStances(actor: CharacterPF2e, html: JQuery) {\r\n    const stances = getStances(actor).sort((a, b) => a.name.localeCompare(b.name))\r\n    if (!stances.length) return\r\n\r\n    const inCombat = actor.getActiveTokens(true, true).some(token => token.inCombat)\r\n    const tab = html.find('.sheet-body .sheet-content [data-tab=actions] .tab-content .actions-panels [data-tab=encounter]')\r\n    const options = tab.find('.actions-options')\r\n    const template = await renderTemplate(templatePath('stances.hbs'), {\r\n        stances,\r\n        canUseStances: inCombat && !actor.isDead,\r\n        i18n: localize,\r\n    })\r\n\r\n    if (options.length) options.after(template)\r\n    else tab.prepend(template)\r\n}\r\n","import { setModuleID } from '@utils/module'\r\nimport { registerSetting } from '@utils/foundry/settings'\r\nimport { checkForSavant } from './savant'\r\nimport { refreshCharacterSheets, renderCharacterSheetPF2e } from './sheet'\r\nimport { getEffects, parseCustomStances } from './stances'\r\n\r\nexport const MODULE_ID = 'pf2e-stances'\r\nsetModuleID(MODULE_ID)\r\n\r\nHooks.once('setup', () => {\r\n    registerSetting({\r\n        name: 'custom',\r\n        type: String,\r\n        default: '',\r\n        config: true,\r\n        onChange: parseCustomStances,\r\n    })\r\n})\r\n\r\nHooks.once('ready', () => {\r\n    parseCustomStances()\r\n})\r\n\r\nHooks.on('deleteCombatant', deleteCombatant)\r\nHooks.on('createCombatant', createCombatant)\r\nHooks.on('deleteCombat', deleteCombat)\r\n\r\nHooks.on('renderCharacterSheetPF2e', renderCharacterSheetPF2e)\r\n\r\nfunction deleteCombat(combat: Combat) {\r\n    for (const combatant of combat.combatants) {\r\n        deleteCombatant(combatant)\r\n    }\r\n}\r\n\r\nfunction deleteCombatant(combatant: Combatant) {\r\n    const actor = getActorFromCombatant(combatant)\r\n    if (!actor) return\r\n\r\n    if (game.user.isGM) {\r\n        const effects = getEffects(actor).map(effect => effect.id)\r\n        if (effects.length) actor.deleteEmbeddedDocuments('Item', effects)\r\n    }\r\n\r\n    refreshCharacterSheets(actor)\r\n}\r\n\r\nfunction createCombatant(combatant: Combatant) {\r\n    const actor = getActorFromCombatant(combatant)\r\n    if (!actor) return\r\n\r\n    if (!game.user.isGM && actor.isOwner) checkForSavant(actor)\r\n\r\n    refreshCharacterSheets(actor)\r\n}\r\n\r\nfunction getActorFromCombatant(combatant: Combatant) {\r\n    const actor = (combatant as CombatantPF2e).actor\r\n    if (!actor || actor.isToken || !actor.isOfType('character')) return\r\n    else return actor\r\n}\r\n"],"names":["path","join","getSourceId","doc","getFlag","localize","args","key","data","game","i18n","format","subLocalize","subKey","fn","Object","defineProperties","warn","value","str","arg1","arg2","notify","enumerable","configurable","info","error","has","hasLocalization","localizePath","template","hash","arg3","type","undefined","permanent","ui","notifications","STANCES","feat","effect","replace","FEATS","Map","EFFECTS","parseCustomStances","clear","stance","set","setting","settings","get","trim","customs","JSON","parse","Array","isArray","length","err","console","getStances","actor","stances","replaced","effects","itemTypes","sourceId","push","id","filter","includes","map","fromUuidSync","name","img","effectID","effectUUID","getEffects","uuid","async","addStance","fromUuid","items","createEmbeddedDocuments","toObject","toMessage","STANCE_SAVANT","checkForSavant","flatMap","getItems","some","item","list","includesSourceId","getItemSourceIdCondition","hasItemWithSourceId","content","i","Dialog","title","buttons","yes","icon","label","callback","html","find","val","no","render","openStancesMenu","refreshCharacterSheets","win","values","windows","ActorSheet","deleteCombatant","combatant","getActorFromCombatant","user","isGM","deleteEmbeddedDocuments","isToken","isOfType","Hooks","once","options","scope","config","hint","choices","reduce","choice","register","registerSetting","String","default","onChange","on","isOwner","combat","combatants","sheet","sort","a","b","localeCompare","inCombat","getActiveTokens","token","tab","renderTemplate","x","templatePath","canUseStances","isDead","after","prepend","addStances","event","target","currentTarget","closest","classList","contains","ctrlKey","dataset","effectUuid","already","findIndex","create","other","more","splice","onToggleStance"],"sourceRoot":""}